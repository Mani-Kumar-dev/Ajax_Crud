[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.asgi",
        "description": "Ajax_Crud.Ajax_Crud.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Ajax_Crud.Ajax_Crud.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-u0s&wvpnf3=+n8_3o5&_6d6(@_08jua520eu*7fw!dk)2ww+71'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-u0s&wvpnf3=+n8_3o5&_6d6(@_08jua520eu*7fw!dk)2ww+71'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Emp_management',",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Emp_management',\n]\nMIDDLEWARE = [",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Ajax_Crud.urls'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "ROOT_URLCONF = 'Ajax_Crud.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,\"templates\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,\"templates\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Ajax_Crud.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,\"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,\"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,\"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,\"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,\"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR,\"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.settings",
        "description": "Ajax_Crud.Ajax_Crud.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Ajax_Crud.Ajax_Crud.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.urls",
        "description": "Ajax_Crud.Ajax_Crud.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"\",include(\"Emp_management.urls\"))\n]",
        "detail": "Ajax_Crud.Ajax_Crud.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Ajax_Crud.Ajax_Crud.wsgi",
        "description": "Ajax_Crud.Ajax_Crud.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Ajax_Crud.Ajax_Crud.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Ajax_Crud.Emp_management.migrations.0001_initial",
        "description": "Ajax_Crud.Emp_management.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Employee',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "Ajax_Crud.Emp_management.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "EmpManagementConfig",
        "kind": 6,
        "importPath": "Ajax_Crud.Emp_management.apps",
        "description": "Ajax_Crud.Emp_management.apps",
        "peekOfCode": "class EmpManagementConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Emp_management'",
        "detail": "Ajax_Crud.Emp_management.apps",
        "documentation": {}
    },
    {
        "label": "EmployeeForm",
        "kind": 6,
        "importPath": "Ajax_Crud.Emp_management.forms",
        "description": "Ajax_Crud.Emp_management.forms",
        "peekOfCode": "class EmployeeForm(forms.ModelForm):\n    class Meta:\n        model = Employee\n        fields = [\n            'name', 'email', 'age', 'gender', 'phoneNo', 'hno', \n            'street', 'city', 'state', 'companyName', 'fromDate', \n            'toDate', 'address', 'qualificationName', 'percentage', \n            'title', 'description', 'photo'\n        ]\n        widgets = {",
        "detail": "Ajax_Crud.Emp_management.forms",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "Ajax_Crud.Emp_management.models",
        "description": "Ajax_Crud.Emp_management.models",
        "peekOfCode": "class Employee(models.Model):\n    GENDER_CHOICES = [\n         ('M','Male'),\n         ('F','Female'),\n         ('O','Other'),\n    ]\n    name = models.CharField(max_length=100)\n    email = models.EmailField(unique=True)\n    age = models.IntegerField()\n    gender = models.CharField(max_length=1,choices=GENDER_CHOICES)",
        "detail": "Ajax_Crud.Emp_management.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Ajax_Crud.Emp_management.urls",
        "description": "Ajax_Crud.Emp_management.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\",views.Employee_List,name=\"Employee_List\"),\n    path(\"create/\",views.createEmployee,name=\"createEmployee\"),\n    path('delete_employee_url/<int:employee_id>/', views.deleteEmployee, name='delete_employee'),\n    path('edit-employee/<int:employee_id>/', views.editEmployee, name='edit_employee'),\n]",
        "detail": "Ajax_Crud.Emp_management.urls",
        "documentation": {}
    },
    {
        "label": "Employee_List",
        "kind": 2,
        "importPath": "Ajax_Crud.Emp_management.views",
        "description": "Ajax_Crud.Emp_management.views",
        "peekOfCode": "def Employee_List(request):\n    if request.method == 'GET' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        try:\n            employees = list(Employee.objects.all().values())  # Get employee data as a list of dictionaries\n            return JsonResponse(employees, safe=False)  # Return JSON data\n        except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)\n    # If it's not an AJAX request, render the full template\n    employees = Employee.objects.all()\n    return render(request, \"Emp_list.html\", {'employees': employees})",
        "detail": "Ajax_Crud.Emp_management.views",
        "documentation": {}
    },
    {
        "label": "createEmployee",
        "kind": 2,
        "importPath": "Ajax_Crud.Emp_management.views",
        "description": "Ajax_Crud.Emp_management.views",
        "peekOfCode": "def createEmployee(request):\n    if request.method == 'POST':\n        try:\n            # Extracting data directly from request.POST and request.FILES\n            name = request.POST.get('name')\n            email = request.POST.get('email')\n            age = request.POST.get('age')\n            gender = request.POST.get('gender')\n            phone_no = request.POST.get('phoneNo')\n            hno = request.POST.get('hno')",
        "detail": "Ajax_Crud.Emp_management.views",
        "documentation": {}
    },
    {
        "label": "deleteEmployee",
        "kind": 2,
        "importPath": "Ajax_Crud.Emp_management.views",
        "description": "Ajax_Crud.Emp_management.views",
        "peekOfCode": "def deleteEmployee(request, employee_id):\n    if request.method == 'DELETE':\n        try:\n            employee = Employee.objects.get(id=employee_id)\n            employee.delete()\n            return JsonResponse({'message': 'Employee deleted successfully!'}, status=200)\n        except Employee.DoesNotExist:\n            return JsonResponse({'error': 'Employee not found'}, status=404)\n        except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)",
        "detail": "Ajax_Crud.Emp_management.views",
        "documentation": {}
    },
    {
        "label": "editEmployee",
        "kind": 2,
        "importPath": "Ajax_Crud.Emp_management.views",
        "description": "Ajax_Crud.Emp_management.views",
        "peekOfCode": "def editEmployee(request, employee_id):\n    try:\n        employee = Employee.objects.get(id=employee_id)\n    except Employee.DoesNotExist:\n        return JsonResponse({'error': 'Employee not found'}, status=404)\n    if request.method == 'GET':\n        # Return employee data as JSON for pre-filling form\n        employee_data = {\n            'name': employee.name,\n            'email': employee.email,",
        "detail": "Ajax_Crud.Emp_management.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Ajax_Crud.manage",
        "description": "Ajax_Crud.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Ajax_Crud.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "Ajax_Crud.manage",
        "documentation": {}
    }
]